
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__PlotServerProxy_proxy_h__PROXY_MARSHAL_H
#define __dbusxx__PlotServerProxy_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace edu {
namespace nrao {
namespace casa {

class plotserver_proxy
: public ::DBus::InterfaceProxy
{
public:

    plotserver_proxy()
    : ::DBus::InterfaceProxy("edu.nrao.casa.plotserver")
    {
        connect_signal(plotserver_proxy, button, _button_stub);
        connect_signal(plotserver_proxy, check, _check_stub);
        connect_signal(plotserver_proxy, radio, _radio_stub);
        connect_signal(plotserver_proxy, linetext, _linetext_stub);
        connect_signal(plotserver_proxy, slidevalue, _slidevalue_stub);
        connect_signal(plotserver_proxy, closing, _closing_stub);
        connect_signal(plotserver_proxy, exiting, _exiting_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Variant panel(const std::string& title, const std::string& xlabel, const std::string& ylabel, const std::string& window_title, const std::vector< int32_t >& size, const std::string& legend, const std::string& zoom, const int32_t& with_panel, const bool& new_row, const bool& hidden)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << title;
        wi << xlabel;
        wi << ylabel;
        wi << window_title;
        wi << size;
        wi << legend;
        wi << zoom;
        wi << with_panel;
        wi << new_row;
        wi << hidden;
        call.member("panel");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > colors()
    {
        ::DBus::CallMessage call;
        call.member("colors");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > colormaps()
    {
        ::DBus::CallMessage call;
        call.member("colormaps");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > symbols()
    {
        ::DBus::CallMessage call;
        call.member("symbols");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant line(const std::vector< double >& x, const std::vector< double >& y, const std::string& color, const std::string& label, const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << x;
        wi << y;
        wi << color;
        wi << label;
        wi << panel;
        call.member("line");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant scatter(const std::vector< double >& x, const std::vector< double >& y, const std::string& color, const std::string& label, const std::string& symbol, const int32_t& symbol_size, const int32_t& dot_size, const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << x;
        wi << y;
        wi << color;
        wi << label;
        wi << symbol;
        wi << symbol_size;
        wi << dot_size;
        wi << panel;
        call.member("scatter");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant histogram(const std::vector< double >& values, const int32_t& bins, const std::string& color, const std::string& label, const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << values;
        wi << bins;
        wi << color;
        wi << label;
        wi << panel;
        call.member("histogram");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant raster(const std::vector< double >& matrix, const int32_t& sizex, const int32_t& sizey, const std::string& colormap, const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << matrix;
        wi << sizex;
        wi << sizey;
        wi << colormap;
        wi << panel;
        call.member("raster");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant erase(const int32_t& data_or_panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << data_or_panel;
        call.member("erase");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant setlabel(const std::string& xlabel, const std::string& ylabel, const std::string& title, const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << xlabel;
        wi << ylabel;
        wi << title;
        wi << panel;
        call.member("setlabel");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant close(const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << panel;
        call.member("close");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant release(const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << panel;
        call.member("release");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant show(const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << panel;
        call.member("show");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant hide(const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << panel;
        call.member("hide");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    void done()
    {
        ::DBus::CallMessage call;
        call.member("done");
        ::DBus::Message ret = invoke_method (call);
    }

    ::DBus::Variant loaddock(const std::string& file_or_xml, const std::string& loc, const std::vector< std::string >& dockable, const int32_t& panel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << file_or_xml;
        wi << loc;
        wi << dockable;
        wi << panel;
        call.member("loaddock");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void button(const int32_t& panel, const std::string& name) = 0;
    virtual void check(const int32_t& panel, const std::string& name, const int32_t& state) = 0;
    virtual void radio(const int32_t& panel, const std::string& name, const bool& state) = 0;
    virtual void linetext(const int32_t& panel, const std::string& name, const std::string& value) = 0;
    virtual void slidevalue(const int32_t& panel, const std::string& name, const int32_t& value) = 0;
    virtual void closing(const int32_t& panel, const bool& gone) = 0;
    virtual void exiting() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _button_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t panel;
        ri >> panel;
        std::string name;
        ri >> name;
        button(panel, name);
    }
    void _check_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t panel;
        ri >> panel;
        std::string name;
        ri >> name;
        int32_t state;
        ri >> state;
        check(panel, name, state);
    }
    void _radio_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t panel;
        ri >> panel;
        std::string name;
        ri >> name;
        bool state;
        ri >> state;
        radio(panel, name, state);
    }
    void _linetext_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t panel;
        ri >> panel;
        std::string name;
        ri >> name;
        std::string value;
        ri >> value;
        linetext(panel, name, value);
    }
    void _slidevalue_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t panel;
        ri >> panel;
        std::string name;
        ri >> name;
        int32_t value;
        ri >> value;
        slidevalue(panel, name, value);
    }
    void _closing_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t panel;
        ri >> panel;
        bool gone;
        ri >> gone;
        closing(panel, gone);
    }
    void _exiting_stub(const ::DBus::SignalMessage &sig)
    {
        exiting();
    }
};

} } } 
#endif //__dbusxx__PlotServerProxy_proxy_h__PROXY_MARSHAL_H
